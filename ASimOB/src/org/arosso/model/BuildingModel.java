package org.arosso.model;
/**
 * File generated from the model::BuildingModel uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */


import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.Vector;

import org.arosso.egcs.ElevatorGroupController;
import org.arosso.sim.SimulationModel;

/**
 * Alejandra Bordamalo
 */
public class BuildingModel implements SimulationModel {
    /**
     * Description of the property elevator.
     */
    public Vector<Elevator> elevators;
    
    /**
     * Description of the property floor.
     */
    public Vector<Floor> floors;
    
    /**
     * Description of the property passenger.
     */
    public Vector<Passenger> passenger = new Vector<Passenger>();
    
    /**
     * Description of the property elevatorGroupController.
     */
    public ElevatorGroupController elevatorGroupController = null;
    
    /**
     * Description of the property time.
     */
    public final Long time = null;
    
    /**
     * Description of the property numFloors.
     */
    public Integer numFloors = null;
    
    /**
     * Description of the property floorGapDistance.
     */
    public Float floorGapDistance = null;
    
    /**
     * Description of the property numElevators.
     */
    public Integer numElevators = null;
    
    /**
     * http://intermediatetwo.webs.com/listening.htm  en 
     */
    public Vector<Passenger> users = new Vector<Passenger>();
    
    /**
     * Description of the property futureArrivals.
     */
    public Vector<Passenger> futureArrivals = new Vector<Passenger>();
    

    
    /**
     * The constructor.
     * @throws IOException 
     */
    public BuildingModel() throws IOException, Exception {
    	super();
    	InputStream is = this.getClass().getResourceAsStream("/building.properties");
    	Properties prop = new Properties();  
        prop.load(is);  
        
        //Read model properties
        numElevators = (Integer)prop.getProperty("numElevators");
        numFloors = (Integer)prop.getProperty("numFloors");
        
        //Read elevator props
        this.readElevatorProps(prop);
        
        //Read floor properties
        
        is.close();
    }
    
    /**
     * 
     * @param prop
     */
    public void readElevatorProps(Properties prop){
    	//Read elevator properties
        Integer capacity= (Integer)prop.getProperty("capacity");
        Float aceleration= (Float)prop.getProperty("aceleration");
        Float jerk= (Float)prop.getProperty("jerk");
        Float speed= (Float)prop.getProperty("speed");
        Float doorCloseTime= (Float)prop.getProperty("doorCloseTime");
        Float doorOpenTime= (Float)prop.getProperty("doorOpenTime");
        Float passangerTransferTime= (Float)prop.getProperty("passangerTransferTime");
        Integer restFloor= (Integer)prop.getProperty("numElevators");
        elevators = new Vector<Elevator>(numElevators);
        int counter = 1;
        for(Elevator elevator : elevators){
        	elevator = new Elevator(counter, capacity, aceleration, speed, jerk, doorCloseTime, doorOpenTime, passangerTransferTime, restFloor);
        	elevators.add(elevator);
        	counter++;
        }
    }   
    
    /**
     * 
     * @param prop
     */
    public void readFloorProps(Properties prop){
    	//Read floor properties
        Integer capacity= (Integer)prop.getProperty("capacity");
        Float aceleration= (Float)prop.getProperty("aceleration");
        Float jerk= (Float)prop.getProperty("jerk");
        Float speed= (Float)prop.getProperty("speed");
        Float doorCloseTime= (Float)prop.getProperty("doorCloseTime");
        Float doorOpenTime= (Float)prop.getProperty("doorOpenTime");
        Float passangerTransferTime= (Float)prop.getProperty("passangerTransferTime");
        Integer restFloor= (Integer)prop.getProperty("numElevators");
        floors = new Vector<Floor>(numFloors);
        int counter = 0;
        for(Elevator elevator : elevators){
        	elevator = new Elevator(counter, capacity, aceleration, speed, jerk, doorCloseTime, doorOpenTime, passangerTransferTime, restFloor);
        	elevators.add(elevator);
        	counter++;
        }
    }
    
    /**
     * Returns elevator.
     * @return elevator 
     */
    public Vector<Elevator> getElevators() {
    	return this.elevators;
    }
    
    /**
     * Sets a value to attribute elevator. 
     * @param newElevator 
     */
    public void setElevators(Vector<Elevator> newElevators) {
        this.elevators = newElevators;
    }
    
    /**
     * Returns floor.
     * @return floor 
     */
    public Vector<Floor> getFloors() {
    	return this.floors;
    }
    
    /**
     * Sets a value to attribute floor. 
     * @param newFloor 
     */
    public void setFloors(Vector<Floor> newFloors) {
        this.floors = newFloors;
    }
    
    /**
     * Returns passenger.
     * @return passenger 
     */
    public Vector<Passenger> getpassenger() {
    	return this.passenger;
    }
    
    /**
     * Sets a value to attribute passenger. 
     * @param newpassenger 
     */
    public void setpassenger(Vector<Passenger> newpassenger) {
        this.passenger = newpassenger;
    }
    
    /**
     * Returns elevatorGroupController.
     * @return elevatorGroupController 
     */
    public ElevatorGroupController getElevatorGroupController() {
    	return this.elevatorGroupController;
    }
    
    /**
     * Sets a value to attribute elevatorGroupController. 
     * @param newElevatorGroupController 
     */
    public void setElevatorGroupController(ElevatorGroupController newElevatorGroupController) {
        this.elevatorGroupController = newElevatorGroupController;
    }
    
    /**
     * Returns time.
     * @return time 
     */
    public Long getTime() {
    	return this.time;
    }
    
    /**
     * Returns numFloors.
     * @return numFloors 
     */
    public Object getNumFloors() {
    	return this.numFloors;
    }
    
    /**
     * Sets a value to attribute numFloors. 
     * @param newNumFloors 
     */
    public void setNumFloors(Object newNumFloors) {
        this.numFloors = newNumFloors;
    }
    
    /**
     * Returns floorGapDistance.
     * @return floorGapDistance 
     */
    public Object getFloorGapDistance() {
    	return this.floorGapDistance;
    }
    
    /**
     * Sets a value to attribute floorGapDistance. 
     * @param newFloorGapDistance 
     */
    public void setFloorGapDistance(Object newFloorGapDistance) {
        this.floorGapDistance = newFloorGapDistance;
    }
    
    /**
     * Returns numElevator.
     * @return numElevator 
     */
    public Object getNumElevator() {
    	return this.numElevators;
    }
    
    /**
     * Sets a value to attribute numElevator. 
     * @param newNumElevator 
     */
    public void setNumElevator(Object newNumElevator) {
        this.numElevators = newNumElevator;
    }
    
    /**
     * Returns users.
     * @return users http://intermediatetwo.webs.com/listening.htm  en 
     */
    public Vector<Passenger> getUsers() {
    	return this.users;
    }
    
    /**
     * Sets a value to attribute users. 
     * @param newUsers http://intermediatetwo.webs.com/listening.htm  en 
     */
    public void setUsers(Vector<Passenger> newUsers) {
        this.users = newUsers;
    }
    
    /**
     * Returns futureArrivals.
     * @return futureArrivals 
     */
    public Vector<Passenger> getFutureArrivals() {
    	return this.futureArrivals;
    }
    
    /**
     * Sets a value to attribute futureArrivals. 
     * @param newFutureArrivals 
     */
    public void setFutureArrivals(Vector<Passenger> newFutureArrivals) {
        this.futureArrivals = newFutureArrivals;
    }
    
    
}
