package org.arosso.model;
/**
 * File generated from the model::BuildingModel uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */


import java.io.IOException;
import java.util.Vector;

import org.arosso.egcs.ElevatorGroupController;
import org.arosso.sim.SimulationModel;
import org.arosso.util.PropertiesBroker;
import org.arosso.util.PropertiesBroker.PROP_SET;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Alejandra Bordamalo
 */
public class BuildingModel extends SimulationModel {
	/** 
	 * Intance
	 */
	private static BuildingModel instance = null;
	
    /**
     * Description of the property elevator.
     */
    public Vector<Elevator> elevators;
    
    /**
     * Description of the property floor.
     */
    public Vector<Floor> floors;
    
    /**
     * Description of the property passenger.
     */
    public Vector<Passenger> passenger = new Vector<Passenger>();
    
    /**
     * Description of the property elevatorGroupController.
     */
    public ElevatorGroupController elevatorGroupController = null;
    
    /**
     * Description of the property time.
     */
    public final Long time = null;
    
    /**
     * Description of the property numFloors.
     */
    public Integer numFloors = null;
    
    /**
     * Description of the property floorGapDistance.
     */
    public Float floorGapDistance = null;
    
    /**
     * Description of the property numElevators.
     */
    public Integer numElevators = null;
    
    /**
     * users
     */
    public Vector<Passenger> users = new Vector<Passenger>();
    
    /**
     * Description of the property futureArrivals.
     */
    public Vector<Passenger> futureArrivals;
    
    /**
     * Logger
     */
    Logger logger = LoggerFactory.getLogger(this.getClass());
    
    public enum SIM_STATE {STARTED, PAUSED, STOPPED};
    
    public SIM_STATE simState = SIM_STATE.STOPPED;
    
    /**
     * Default
     * @throws Exception 
     * @throws IOException 
     */
    private BuildingModel() throws IOException, Exception {
    	super();
		// Read model properties
    	PropertiesBroker propertiesBroker = PropertiesBroker.getInstance();
		numElevators = Integer.valueOf(propertiesBroker.getProperty(PROP_SET.SIMULATION,"numElevators"));
		numFloors = Integer.valueOf(propertiesBroker.getProperty(PROP_SET.SIMULATION,"numFloors"));
		floorGapDistance = Float.valueOf(propertiesBroker.getProperty(PROP_SET.SIMULATION,"floorGapDistance"));
		endSimulationTime = Long.valueOf(propertiesBroker.getProperty(PROP_SET.SIMULATION,"endSimulationTime"));
		deltaAdvaceTime = Float.valueOf(propertiesBroker.getProperty(PROP_SET.SIMULATION,"deltaAdvaceTime"));
		// Read elevator properties
		this.readElevatorProps(propertiesBroker);
		// Read floor properties
		this.readFloorProps(propertiesBroker);
        logger.info("BuildingModel loaded");
    }
    
    public static BuildingModel getInstance() throws IOException, Exception{
    	if(instance==null){
    		instance = new BuildingModel();
    	}
    	return instance;
    }
    
    /**
     * 
     * @param prop
     */
    private void readElevatorProps(PropertiesBroker prop){
    	//Read elevator properties
        Integer capacity=  Integer.valueOf(prop.getProperty(PROP_SET.SIMULATION,"capacity"));
        Float aceleration= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"aceleration"));
        Float jerk= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"jerk"));
        Float speed= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"speed"));
        Float doorCloseTime= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"doorCloseTime"));
        Float doorOpenTime= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"doorOpenTime"));
        Float passangerTransferTime= Float.valueOf(prop.getProperty(PROP_SET.SIMULATION,"passangerTransferTime"));
        Integer restFloor=  Integer.valueOf(prop.getProperty(PROP_SET.SIMULATION,"numElevators"));
        elevators = new Vector<Elevator>(numElevators);
        int counter = 1;
        for(Elevator elevator : elevators){
        	elevator = new Elevator(counter, capacity, aceleration, speed, jerk, doorCloseTime, doorOpenTime, passangerTransferTime, restFloor);
        	elevators.add(elevator);
        	counter++;
        }
    }   
    
    /**
     * Read floor properties
     * @param prop
     */
    private void readFloorProps(PropertiesBroker prop){
    	//Read floor properties
        String portalFloors=  prop.getProperty(PROP_SET.SIMULATION,"portalFloors");
        floors = new Vector<Floor>(numFloors);
        int counter = 0;
        for(Floor floor : floors){
        	boolean isPortalFloor = false;
        	if( portalFloors.contains(("["+String.valueOf(counter)+"]")) ){
        		isPortalFloor=true;
        	}
        	floor = new Floor(String.valueOf(counter), isPortalFloor, String.valueOf(counter));
        	floors.add(floor);
        	counter++;
        }
    }
    
    /**
     * Returns elevator.
     * @return elevator 
     */
    public Vector<Elevator> getElevators() {
    	return this.elevators;
    }
    
    /**
     * Sets a value to attribute elevator. 
     * @param newElevator 
     */
    public void setElevators(Vector<Elevator> newElevators) {
        this.elevators = newElevators;
    }
    
    /**
     * Returns floor.
     * @return floor 
     */
    public Vector<Floor> getFloors() {
    	return this.floors;
    }
    
    /**
     * Sets a value to attribute floor. 
     * @param newFloor 
     */
    public void setFloors(Vector<Floor> newFloors) {
        this.floors = newFloors;
    }
    
    /**
     * Returns passenger.
     * @return passenger 
     */
    public Vector<Passenger> getpassenger() {
    	return this.passenger;
    }
    
    /**
     * Sets a value to attribute passenger. 
     * @param newpassenger 
     */
    public void setpassenger(Vector<Passenger> newpassenger) {
        this.passenger = newpassenger;
    }
    
    /**
     * Returns elevatorGroupController.
     * @return elevatorGroupController 
     */
    public ElevatorGroupController getElevatorGroupController() {
    	return this.elevatorGroupController;
    }
    
    /**
     * Sets a value to attribute elevatorGroupController. 
     * @param newElevatorGroupController 
     */
    public void setElevatorGroupController(ElevatorGroupController newElevatorGroupController) {
        this.elevatorGroupController = newElevatorGroupController;
    }
    
    /**
     * Returns time.
     * @return time 
     */
    public Long getTime() {
    	return this.time;
    }
    
    /**
     * Returns numFloors.
     * @return numFloors 
     */
    public int getNumFloors() {
    	return this.numFloors;
    }
    
    /**
     * Sets a value to attribute numFloors. 
     * @param newNumFloors 
     */
    public void setNumFloors(Integer newNumFloors) {
        this.numFloors = newNumFloors;
    }
    
    /**
     * Returns floorGapDistance.
     * @return floorGapDistance 
     */
    public Object getFloorGapDistance() {
    	return this.floorGapDistance;
    }
    
    /**
     * Sets a value to attribute floorGapDistance. 
     * @param newFloorGapDistance 
     */
    public void setFloorGapDistance(Float newFloorGapDistance) {
        this.floorGapDistance = newFloorGapDistance;
    }
    
    /**
     * Returns numElevator.
     * @return numElevator 
     */
    public Object getNumElevator() {
    	return this.numElevators;
    }
    
    /**
     * Sets a value to attribute numElevator. 
     * @param newNumElevator 
     */
    public void setNumElevator(Integer newNumElevator) {
        this.numElevators = newNumElevator;
    }
    
    /**
     * Returns users.
     * @return users http://intermediatetwo.webs.com/listening.htm  en 
     */
    public Vector<Passenger> getUsers() {
    	return this.users;
    }
    
    /**
     * Sets a value to attribute users. 
     * @param newUsers http://intermediatetwo.webs.com/listening.htm  en 
     */
    public void setUsers(Vector<Passenger> newUsers) {
        this.users = newUsers;
    }
    
    /**
     * Returns futureArrivals.
     * @return futureArrivals 
     */
    public Vector<Passenger> getFutureArrivals() {
    	return this.futureArrivals;
    }
    
    /**
     * Sets a value to attribute futureArrivals. 
     * @param newFutureArrivals 
     */
    public void setFutureArrivals(Vector<Passenger> newFutureArrivals) {
        this.futureArrivals = newFutureArrivals;
    }
    
    @Override
    public String toString() {
    	String model = "SimTime ("+time+") Floors: "+this.numFloors+"\n";
    	model += "Elevators: "+this.numElevators+"\n";
    	model += "Floor Gap Distance: "+this.floorGapDistance+"\n";
    	return model;
    }
    
    
}
