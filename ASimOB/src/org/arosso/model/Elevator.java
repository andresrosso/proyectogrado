package org.arosso.model;

/**
 * File generated from the model::Elevator uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */

import java.util.Observable;
import java.util.Vector;

import org.arosso.routines.egcs.ai.AnnInputSVO;
import org.arosso.routines.egcs.ai.AnnInputWVO;
import org.arosso.sim.RoutineManager;
import org.arosso.sim.TrafficModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
// Start of user code (user defined imports)	

// End of user code

/**
 * http://intermediatetwo.webs.com/listening.htm en
 */
public class Elevator extends Observable {

	public enum Direction {
		UP, DOWN, NONE;
	}

	public enum State {
		MOVING, OPEN_DOOR, CLOSE_DOOR, COMING_PASS, EXIT_PASS, OUT_OF_SERVICE, RESTING;
	}

	/**
	 * Description of the property elevatorId.
	 */
	private Integer id = 0;

	/**
	 * Description of the property capacity.
	 */
	private Integer capacity = 0;

	/**
	 * Description of the property aceleration.
	 */
	private Float aceleration = 0.0f;

	/**
	 * Description of the property speed.
	 */
	private Float speed = 0.0f;
	
	//TODO: What to do
	private Float jerk = 0.0f;

	/**
	 * Description of the property doorCloseTime.
	 */
	private Float doorCloseTime = 0.0f;

	/**
	 * Description of the property doorOpenTime.
	 */
	private Float doorOpenTime = 0.0f;

	/**
	 * Description of the property passangerTransferTime.
	 */
	private Float passangerTransferTime = 0.0f;

	/**
	 * Description of the property numCurrentPassangers.
	 */
	private Integer numCurrentPassangers = 0;

	/**
	 * Description of the property restFloor.
	 */
	private Integer restFloor = 0;

	/**
	 * Array of people inside the elevator -passenger-.
	 */
	private Vector<Passenger> passengers = new Vector<Passenger>();
	/**
	 * Array of people waiting in the floor the elevator -call-.
	 */
	private Vector<Passenger> calls = new Vector<Passenger>();

	/**
	 * Direccion of elevator
	 */
	private Direction direction = Direction.NONE;
	/**
	 * State of elevator
	 */
	private State state = State.RESTING;

	/**
	 * Description of the property position.
	 */
	private Float position = 0.0f;
	
	/**
	 * Target floor.
	 */
	private int targetFloor = 0;

    /**
     * Logger
     */
    Logger logger = LoggerFactory.getLogger(this.getClass());
	


	/**
	 * Floor runned for each elevator
	 */
	private float floorsRunned;
	
	public Elevator(Integer elevatorId, Integer capacity, Float aceleration,
			Float speed, Float jerk, Float doorCloseTime, Float doorOpenTime,
			Float passangerTransferTime, Integer restFloor) {
		super();
		this.id = elevatorId;
		this.capacity = capacity;
		this.aceleration = aceleration;
		this.speed = speed;
		this.jerk = jerk;
		this.doorCloseTime = doorCloseTime;
		this.doorOpenTime = doorOpenTime;
		this.passangerTransferTime = passangerTransferTime;
		this.restFloor = restFloor;
		this.targetFloor = restFloor;
		this.position = restFloor.floatValue();
		this.state = State.RESTING;
		this.floorsRunned=0;
	}

	/**
	 * Returns elevatorId.
	 * 
	 * @return elevatorId
	 */
	public Integer getId() {
		return this.id;
	}

	/**
	 * Sets a value to attribute elevatorId.
	 * 
	 * @param newElevatorId
	 */
	public void setId(Integer newElevatorId) {
		this.id = newElevatorId;
	}

	/**
	 * Returns capacity.
	 * 
	 * @return capacity
	 */
	public Integer getCapacity() {
		return this.capacity;
	}

	/**
	 * Sets a value to attribute capacity.
	 * 
	 * @param newCapacity
	 */
	public void setCapacity(Integer newCapacity) {
		this.capacity = newCapacity;
	}

	/**
	 * Returns aceleration.
	 * 
	 * @return aceleration
	 */
	public Float getAceleration() {
		return this.aceleration;
	}

	/**
	 * Sets a value to attribute aceleration.
	 * 
	 * @param newAceleration
	 */
	public void setAceleration(Float newAceleration) {
		this.aceleration = newAceleration;
	}

	/**
	 * Returns speed.
	 * 
	 * @return speed
	 */
	public Float getSpeed() {
		return this.speed;
	}

	/**
	 * Sets a value to attribute speed.
	 * 
	 * @param newSpeed
	 */
	public void setSpeed(Float newSpeed) {
		this.speed = newSpeed;
	}

	/**
	 * Returns doorCloseTime.
	 * 
	 * @return doorCloseTime
	 */
	public Float getDoorCloseTime() {
		return this.doorCloseTime;
	}

	/**
	 * Sets a value to attribute doorCloseTime.
	 * 
	 * @param newDoorCloseTime
	 */
	public void setDoorCloseTime(Float newDoorCloseTime) {
		this.doorCloseTime = newDoorCloseTime;
	}

	/**
	 * Returns doorOpenTime.
	 * 
	 * @return doorOpenTime
	 */
	public Float getDoorOpenTime() {
		return this.doorOpenTime;
	}

	/**
	 * Sets a value to attribute doorOpenTime.
	 * 
	 * @param newDoorOpenTime
	 */
	public void setDoorOpenTime(Float newDoorOpenTime) {
		this.doorOpenTime = newDoorOpenTime;
	}

	/**
	 * Returns passangerTransferTime.
	 * 
	 * @return passangerTransferTime
	 */
	public Float getPassangerTransferTime() {
		return this.passangerTransferTime;
	}

	/**
	 * Sets a value to attribute passangerTransferTime.
	 * 
	 * @param newPassangerTransferTime
	 */
	public void setPassangerTransferTime(Float newPassangerTransferTime) {
		this.passangerTransferTime = newPassangerTransferTime;
	}

	/**
	 * Returns numCurrentPassangers.
	 * 
	 * @return numCurrentPassangers
	 */
	public Integer getNumCurrentPassangers() {
		return this.numCurrentPassangers;
	}

	/**
	 * Sets a value to attribute numCurrentPassangers.
	 * 
	 * @param newNumCurrentPassangers
	 */
	public void setNumCurrentPassangers(Integer newNumCurrentPassangers) {
		this.numCurrentPassangers = newNumCurrentPassangers;
	}

	/**
	 * Returns direction.
	 * 
	 * @return direction
	 */
	public Direction getDirection() {
		return this.direction;
	}

	/**
	 * Sets a value to attribute direction.
	 * 
	 * @param newDirection
	 */
	public void setDirection(Direction newDirection) {
		this.direction = newDirection;
	}

	/**
	 * Returns restFloor.
	 * 
	 * @return restFloor
	 */
	public Integer getRestFloor() {
		return this.restFloor;
	}

	/**
	 * Sets a value to attribute restFloor.
	 * 
	 * @param newRestFloor
	 */
	public void setRestFloor(Integer newRestFloor) {
		this.restFloor = newRestFloor;
	}

	/**
	 * Returns passengers.
	 * 
	 * @return passengers
	 */
	public Vector<Passenger> getPassengers() {
		return this.passengers;
	}

	/**
	 * Sets a value to attribute passengers.
	 * 
	 * @param newPassengers
	 */
	public void setPassengers(Vector<Passenger> newPassengers) {
		this.passengers = newPassengers;
	}

	/**
	 * Returns position.
	 * 
	 * @return position
	 */
	public Float getPosition() {
		return this.position;
	}

	/**
	 * Sets a value to attribute position.
	 * 
	 * @param newPosition
	 */
	public void setPosition(Float newPosition) {
		floorsRunned++;
		this.position = newPosition;
	}

	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	public Vector<Passenger> getCalls() {
		return calls;
	}

	public void setCalls(Vector<Passenger> calls) {
		this.calls = calls;
	}

	public void addCall(Passenger call) {
		/*for(Passenger passenger : this.calls){
			if(passenger.getType() == Passenger.Type.MOCK_CALL){
				this.calls.remove(passenger);
			}
		}*/
		try {
			TrafficModel model = RoutineManager.getInstance().getTrafficGenerator().getTrafficModel();
			int time = BuildingModel.getInstance().getSimulationClock().intValue();
			float trIN = model.getEstimatedTrafficIn(time)/7;
			float trOUT = model.getEstimatedTrafficOut(time)/7;
			float trINTERFLOOR = model.getEstimatedTrafficInterfloor(time)/7;
			float passInElev = (float)((float)passengers.size()/capacity);
			AnnInputWVO.getInstance().addInputWVO(
					Math.abs(position-call.getOriginFloor())/BuildingModel.getInstance().getNumFloors(), 
					passInElev, 
					trIN, 
					trOUT,
					trINTERFLOOR, 
					direction, 
					call.getId());
			AnnInputSVO.getInstance().addInputSVO(
					passInElev, 
					trIN, 
					trOUT,
					trINTERFLOOR, 
					direction, 
					call.getId());
			this.calls.add(call);
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
    	setChanged();
		notifyObservers(call);*/
	}
	
	public void removePassenger(Passenger passenger) {
		//Time to service
		float time2service = passenger.getExitTime()-passenger.getEntryTime();
		float normalizedTime = 0;
		if(time2service>100){
			normalizedTime = 1;
		}else{
			normalizedTime = time2service/100;
		}
		AnnInputSVO.getInstance().setTimeToService(normalizedTime,passenger.getId());
		
		//remove the passenger
		this.getPassengers().remove(passenger);
	}

	public void addPassenger(Passenger passenger) {
		//Time to wait
		float time2wait = passenger.getEntryTime()-passenger.getArrivalTime();
		float normalizedTime = 0;
		if(time2wait>150){
			normalizedTime = 1;
		}else{
			normalizedTime = time2wait/150;
		}
		AnnInputWVO.getInstance().setTimeToWait(normalizedTime,passenger.getId());
		
		//Add passenger
		this.passengers.add(passenger);
	}
	
	public void addPassengers(Vector<Passenger> passengers) {
		this.passengers.addAll(passengers);
	}

	public int getTargetFloor() {
		return targetFloor;
	}

	public void setTargetFloor(int targetFloor) {
		this.targetFloor = targetFloor;
	}

	public float getFloorsRunned() {
		return floorsRunned;
	}

}
