package org.arosso.model;
/**
 * File generated from the model::Elevator uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */


import java.util.Vector;
// Start of user code (user defined imports)	

// End of user code

/**
 * http://intermediatetwo.webs.com/listening.htm  en 
 */
public class Elevator {
	

	public enum Direction{
    	UP, DOWN, NONE;
    }
	
	public enum State{
    	MOVING, OPEN_DOOR, CLOSE_DOOR, COMING_PASS, EXIT_PASS, OUT_OF_SERVICE, RESTING;
    }
	
    /**
     * Description of the property elevatorId.
     */
    public Integer id = 0;
    
    /**
     * Description of the property capacity.
     */
    public Integer capacity = 0;
    
    /**
     * Description of the property aceleration.
     */
    public Float aceleration = 0.0f;
    
    /**
     * Description of the property speed.
     */
    public Float speed = 0.0f;
    
    public Float jerk = 0.0f;
    
    /**
     * Description of the property doorCloseTime.
     */
    public Float doorCloseTime = 0.0f;
    
    /**
     * Description of the property doorOpenTime.
     */
    public Float doorOpenTime = 0.0f;
    
    /**
     * Description of the property passangerTransferTime.
     */
    public Float passangerTransferTime = 0.0f;
    
    /**
     * Description of the property numCurrentPassangers.
     */
    public Integer numCurrentPassangers = 0;
    
    /**
     * Description of the property restFloor.
     */
    public Integer restFloor = 0;

    /**
     * Array of people inside the elevator -passenger-.
     */
    public Vector<Passenger> passengers = new Vector<Passenger>();
    /**
     *  Array of people waiting in the floor the elevator -call-.
     */
    public Vector<Passenger> calls = new Vector<Passenger>();

	/**
	 * Direccion of elevator
	 */
    public Direction direction = Direction.NONE;
	/**
	 * State of elevator
	 */
    public State state = State.RESTING;
    
    /**
     * Description of the property position.
     */
    public Float position = 0.0f;
    
	/**
	 * Ammount of time that the elevator has been stopped
	 */
	public Float stoppedTime = 0f;
    
    
    public Elevator(Integer elevatorId, Integer capacity, Float aceleration,
			Float speed, Float jerk, Float doorCloseTime, Float doorOpenTime,
			Float passangerTransferTime, Integer restFloor) {
		super();
		this.id = elevatorId;
		this.capacity = capacity;
		this.aceleration = aceleration;
		this.speed = speed;
		this.jerk = jerk;
		this.doorCloseTime = doorCloseTime;
		this.doorOpenTime = doorOpenTime;
		this.passangerTransferTime = passangerTransferTime;
		this.restFloor = restFloor;
		this.position = restFloor.floatValue();
		this.state = State.RESTING;
	}



	/**
     * Description of the method move.
     */
    public void move() {
    	// Start of user code for method move
    	// End of user code
    }
     
     
    /**
     * Description of the method stop.
     */
    public void stop() {
    	// Start of user code for method stop
    	// End of user code
    }
     
    /**
     * Description of the method rest.
     */
    public void rest() {
    	// Start of user code for method rest
    	// End of user code
    }
    
    /**
     * Returns elevatorId.
     * @return elevatorId 
     */
    public Integer getId() {
    	return this.id;
    }
    
    /**
     * Sets a value to attribute elevatorId. 
     * @param newElevatorId 
     */
    public void setId(Integer newElevatorId) {
        this.id = newElevatorId;
    }
    
    /**
     * Returns capacity.
     * @return capacity 
     */
    public Integer getCapacity() {
    	return this.capacity;
    }
    
    /**
     * Sets a value to attribute capacity. 
     * @param newCapacity 
     */
    public void setCapacity(Integer newCapacity) {
        this.capacity = newCapacity;
    }
    
    /**
     * Returns aceleration.
     * @return aceleration 
     */
    public Float getAceleration() {
    	return this.aceleration;
    }
    
    /**
     * Sets a value to attribute aceleration. 
     * @param newAceleration 
     */
    public void setAceleration(Float newAceleration) {
        this.aceleration = newAceleration;
    }
    
    /**
     * Returns speed.
     * @return speed 
     */
    public Float getSpeed() {
    	return this.speed;
    }
    
    /**
     * Sets a value to attribute speed. 
     * @param newSpeed 
     */
    public void setSpeed(Float newSpeed) {
        this.speed = newSpeed;
    }
    
    /**
     * Returns doorCloseTime.
     * @return doorCloseTime 
     */
    public Float getDoorCloseTime() {
    	return this.doorCloseTime;
    }
    
    /**
     * Sets a value to attribute doorCloseTime. 
     * @param newDoorCloseTime 
     */
    public void setDoorCloseTime(Float newDoorCloseTime) {
        this.doorCloseTime = newDoorCloseTime;
    }
    
    /**
     * Returns doorOpenTime.
     * @return doorOpenTime 
     */
    public Float getDoorOpenTime() {
    	return this.doorOpenTime;
    }
    
    /**
     * Sets a value to attribute doorOpenTime. 
     * @param newDoorOpenTime 
     */
    public void setDoorOpenTime(Float newDoorOpenTime) {
        this.doorOpenTime = newDoorOpenTime;
    }
    
    /**
     * Returns passangerTransferTime.
     * @return passangerTransferTime 
     */
    public Float getPassangerTransferTime() {
    	return this.passangerTransferTime;
    }
    
    /**
     * Sets a value to attribute passangerTransferTime. 
     * @param newPassangerTransferTime 
     */
    public void setPassangerTransferTime(Float newPassangerTransferTime) {
        this.passangerTransferTime = newPassangerTransferTime;
    }
    
    /**
     * Returns numCurrentPassangers.
     * @return numCurrentPassangers 
     */
    public Integer getNumCurrentPassangers() {
    	return this.numCurrentPassangers;
    }
    
    /**
     * Sets a value to attribute numCurrentPassangers. 
     * @param newNumCurrentPassangers 
     */
    public void setNumCurrentPassangers(Integer newNumCurrentPassangers) {
        this.numCurrentPassangers = newNumCurrentPassangers;
    }
    
    /**
     * Returns direction.
     * @return direction 
     */
    public Direction getDirection() {
    	return this.direction;
    }
    
    /**
     * Sets a value to attribute direction. 
     * @param newDirection 
     */
    public void setDirection(Direction newDirection) {
        this.direction = newDirection;
    }
    
    /**
     * Returns restFloor.
     * @return restFloor 
     */
    public Integer getRestFloor() {
    	return this.restFloor;
    }
    
    /**
     * Sets a value to attribute restFloor. 
     * @param newRestFloor 
     */
    public void setRestFloor(Integer newRestFloor) {
        this.restFloor = newRestFloor;
    }
    
    /**
     * Returns passengers.
     * @return passengers 
     */
    public Vector<Passenger> getPassengers() {
    	return this.passengers;
    }
    
    /**
     * Sets a value to attribute passengers. 
     * @param newPassengers 
     */
    public void setPassengers(Vector<Passenger> newPassengers) {
        this.passengers = newPassengers;
    }
    
    /**
     * Returns position.
     * @return position 
     */
    public Float getPosition() {
    	return this.position;
    }
    
    /**
     * Sets a value to attribute position. 
     * @param newPosition 
     */
    public void setPosition(Float newPosition) {
        this.position = newPosition;
    }



	public State getState() {
		return state;
	}



	public void setState(State state) {
		this.state = state;
	}



	public Vector<Passenger> getCalls() {
		return calls;
	}



	public void setCalls(Vector<Passenger> calls) {
		this.calls = calls;
	}

	public void addCall(Passenger call){
		this.calls.add(call);
	}
	
	public void addPassenger(Passenger passenger){
		this.passengers.add(passenger);
	}
    
}
