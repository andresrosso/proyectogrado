package org.arosso.routines;

import org.arosso.model.BuildingModel;
import org.arosso.model.Passenger;
import org.arosso.routines.egcs.ElevatorGroupController;
import org.arosso.sim.SimulationRoutine;
import org.arosso.util.PropertiesBroker;
import org.arosso.util.PropertiesBroker.PROP_SET;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * File generated from the model::ArrivalChecker uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */

// Start of user code (user defined imports)	

// End of user code

/**
 * Description of ArrivalChecker.
 */
public class ArrivalChecker extends SimulationRoutine {
    /**
     * Controller to assign calls to elevators
     */
    private ElevatorGroupController controller;
    
    /**
     * 
     */
    private BuildingModel buildingModel;

    
    /**
     * Logger
     */
    Logger logger = LoggerFactory.getLogger(this.getClass());
    
    /**
     * The constructor.
     * @throws Exception 
     */
    public ArrivalChecker(String name, Float activationTime ) throws Exception {
    	super( name,  activationTime);
    	logger.info("ArrivalChecker loaded!");
    	String egcsClass = PropertiesBroker.getInstance().getProperty(PROP_SET.SIMULATION,"egcsImplementation");
        ClassLoader classLoader = this.getClass().getClassLoader();
        Class myObjectClass = classLoader.loadClass(egcsClass);
        logger.debug("ArrivalChecker using EGCS "+myObjectClass);
        controller = (ElevatorGroupController) myObjectClass.newInstance();
        buildingModel = BuildingModel.getInstance();
    }
    
    @Override
    public void execute() {
    	
    	//Look for a call that take place in this moment of simulation
    	for(Passenger call: buildingModel.getCalls()){
    		//If a new passager arrives to the system, this passager is assigned to an elevator
    		if(buildingModel.getSimulationClock() == call.getArrivalTime()){
    			logger.info("Assign call "+call);
    			int elevator = controller.assignCall(call);
    			buildingModel.getElevators().get(elevator).addCall(call);
    			logger.info("Checking for passangers arrivals> call assigned to elev("+elevator+"), call detail ["+call+"]");
    		}
    	}
    }
    
    
}
