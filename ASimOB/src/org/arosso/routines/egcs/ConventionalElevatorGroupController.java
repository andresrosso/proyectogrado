package org.arosso.routines.egcs;
import java.io.IOException;

import org.arosso.model.BuildingModel;
import org.arosso.model.Elevator;
import org.arosso.model.Passenger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * File generated from the model::conventionalElevatorGroupController uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */


/**
 * Description of conventionalElevatorGroupController.
 */
public class ConventionalElevatorGroupController implements ElevatorGroupController {

    
    /**
     * Logger
     */
    Logger logger = LoggerFactory.getLogger(this.getClass());
    
    BuildingModel buildingModel;
    
    
    /**
     * The constructor.
     * @throws Exception 
     * @throws IOException 
     */
    public ConventionalElevatorGroupController() throws Exception {
    	super();
    	logger.debug("ConventionalElevatorGroupController created!");
    	buildingModel = BuildingModel.getInstance();
    }


	@Override
	public int assignCall(Passenger passenger) {
		int distMin = buildingModel.getNumFloors();
		Elevator bestMatch = null;
		//Assign the nearest elevator in the same direction
		for(Elevator e : buildingModel.getElevators()){
			if(e.getCapacity()>e.getPassengers().size()){
				if(e.getDirection()==passenger.getDirection()){
					if( Math.abs(e.getPosition().intValue()-passenger.getOriginFloor()) < distMin) {
						bestMatch = e;
					}
				}
			}
		}
		//If is null, then assign arbitrary elevator
		if(bestMatch==null){
			return (int)(Math.random()*buildingModel.getNumElevators());
		}
		return bestMatch.getId();
	}
     
    
    
}
