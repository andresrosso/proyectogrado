package org.arosso.stats;

import static org.arosso.util.Constants.*;

import java.awt.Image;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

import org.arosso.db.DatabaseMannager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * File generated from the model::JasperReportManager uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */


// Start of user code (user defined imports)	

// End of user code

/**
 * Description of JasperReportManager.
 */
public class JasperReportManager {
    
	//reports
	private static String WT_REPORT = "WTimeJReport";
	private static String ST_REPORT = "STimeJReport";
	private static String TENERGY_REPORT = "TEnergyJReport";
	/**
	 * Logger
	 */
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
    /**
     * The constructor.
     */
    public JasperReportManager() {
    	super();
		new File(JASPER_REPORTS_PATH).mkdirs();
    }

	public void getWTimeJReport() {
		try {
			Map parametrosReporte=new HashMap(); //Mapa de Parametros del reporte
			//Armamos el MAP
			WTimeJReportGraph tespera = new WTimeJReportGraph();
			Image imagen = tespera.getGraphic();
			parametrosReporte.put("tespera",imagen);//Constantes.getInstance().getRutaRelativa()+"imagenes//save.gif"
			//Cargamos los parametros de las estadisticas
			parametrosReporte.put("media",String.valueOf(WTimeJReportGraph.media));
			parametrosReporte.put("varianza",String.valueOf(WTimeJReportGraph.varianza));
			parametrosReporte.put("desviacion",String.valueOf(WTimeJReportGraph.desviacionEstandar));
			JasperReport report = (JasperReport)JRLoader.loadObject(this.getClass().getResourceAsStream(WT_REPORT+".jasper"));
			DatabaseMannager broker = DatabaseMannager.getInstance();
			JasperPrint printReport = JasperFillManager.fillReport(report,parametrosReporte, new JREmptyDataSource());
			//Generamos el objeto previe del reporte
			JasperViewer viewer = new JasperViewer(printReport,false);
			String date = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
			JasperExportManager.exportReportToPdfFile(printReport, JASPER_REPORTS_PATH+"/"+WT_REPORT+"_"+date+".pdf");
			viewer.setVisible(true);
		} catch (Exception e) {
			logger.error("Error generating report",e);
		}
	}
	
	public void getSTimeJReport() {
		try {
			Map parametrosReporte=new HashMap(); //Mapa de Parametros del reporte
			//Armamos el MAP
			STimeJReportGraph stgraph = new STimeJReportGraph();
			Image imagen = stgraph.getGraphic();
			parametrosReporte.put("tespera",imagen);//Constantes.getInstance().getRutaRelativa()+"imagenes//save.gif"
			//Cargamos los parametros de las estadisticas
			parametrosReporte.put("media",String.valueOf(STimeJReportGraph.media));
			parametrosReporte.put("varianza",String.valueOf(STimeJReportGraph.varianza));
			parametrosReporte.put("desviacion",String.valueOf(STimeJReportGraph.desviacionEstandar));
			JasperReport report = (JasperReport)JRLoader.loadObject(this.getClass().getResourceAsStream(ST_REPORT+".jasper"));
			JasperPrint printReport = JasperFillManager.fillReport(report,parametrosReporte, new JREmptyDataSource());
			//Generamos el objeto previe del reporte
			JasperViewer viewer = new JasperViewer(printReport,false);
			String date = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
			JasperExportManager.exportReportToPdfFile(printReport, JASPER_REPORTS_PATH+"/"+ST_REPORT+"_"+date+".pdf");
			viewer.setVisible(true);
		} catch (Exception e) {
			logger.error("Error generating report",e);
		}
	}
	
	public void getTEnergyJReport(){
		try {
			Map parametrosReporte=new HashMap(); //Mapa de Parametros del reporte
			JasperDesign design; //Diseno del reporte
			//Armamos el MAP
			parametrosReporte.put("texto1","1");//Constantes.getInstance().getRutaRelativa()+"imagenes//save.gif"
			TEnergyJReportGraph energiaConsumida = new TEnergyJReportGraph();
			Image imagen = energiaConsumida.getGraphic();
			parametrosReporte.put("imagen",imagen);//Constantes.getInstance().getRutaRelativa()+"imagenes//save.gif"
			parametrosReporte.put("media",String.valueOf(energiaConsumida.media));
			parametrosReporte.put("varianza",String.valueOf(energiaConsumida.varianza));
			parametrosReporte.put("desviacion",String.valueOf(energiaConsumida.desviacionEstandar));
			parametrosReporte.put("total",String.valueOf(energiaConsumida.acumulado));
			//Cargamos el diseno del reporte
			JasperReport report = (JasperReport)JRLoader.loadObject(this.getClass().getResourceAsStream(TENERGY_REPORT+".jasper"));
			//LLenamos el reporte, pasando el reporte compilado, se genera un
			//objeto JASPERPRINT
			JasperPrint printReport = JasperFillManager.fillReport(report,parametrosReporte, new JREmptyDataSource());
			//Generamos el objeto previe del reporte
			JasperViewer viewer = new JasperViewer(printReport,false);
			//Generamos el objeto previe del reporte
			String date = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
			JasperExportManager.exportReportToPdfFile(printReport, JASPER_REPORTS_PATH+"/"+TENERGY_REPORT+"_"+date+".pdf");
			viewer.setVisible(true);
		} catch (Exception e) {
			logger.error("Error generating report",e);
		}
	}
	
    /**
     * Description of the method generateJasperReport.
     */
    public void generateJasperReport() {

    }



	

}
