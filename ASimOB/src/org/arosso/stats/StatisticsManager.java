package org.arosso.stats;
import java.util.Observable;
import java.util.Observer;

import org.arosso.db.DatabaseMannager;
import org.arosso.model.Passenger;
import org.arosso.sim.BuildingSimulator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * File generated from the model::StatisticsManager uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */

// Start of user code (user defined imports)	

// End of user code

/**
 * Description of StatisticsManager.
 */
public class StatisticsManager extends Observable {
    /**
     * Description of the property buildingSimulator.
     */
    private static StatisticsManager instace = null;
    
    
    
    /**
     * Description of the property jasperReportManager.
     */
    private JasperReportManager jasperReportManager = null;
    
    /**
     * Database connection manager
     */
    private DatabaseMannager databaseMannager;
    
	/**
	 * Logger
	 */
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
    public static StatisticsManager getInstance(){
    	if(instace==null){
    		instace = new StatisticsManager();
    	}
    	return instace;
    }
    
    /**
     * The constructor.
     */
    private StatisticsManager() {
    	super();
    	try {
    		jasperReportManager = new JasperReportManager();
			databaseMannager = DatabaseMannager.getInstance();
			databaseMannager.createConn();
			databaseMannager.createTables();
		} catch (Exception e) {
			logger.error("Error initilizing HSQLDB",e);
		}
    }
    
    /**
     * Description of the method generateServiceTimeReport.
     */
    public void generateServiceTimeReport() {
    	// Start of user code for method generateServiceTimeReport
    	// End of user code
    }
    
    /**
     * Returns jasperReportManager.
     * @return jasperReportManager 
     */
    public JasperReportManager getJasperReportManager() {
    	return this.jasperReportManager;
    }
    
    /**
     * Sets a value to attribute jasperReportManager. 
     * @param newJasperReportManager 
     */
    public void setJasperReportManager(JasperReportManager newJasperReportManager) {
        this.jasperReportManager = newJasperReportManager;
    }
    
    /**
     * Update database statistics
     * @param passenger
     */
	public void updateStatistics(Passenger passenger, Integer elevatorID) {
		System.err.print("updateStatistics "+ passenger);
		databaseMannager.insertPassenger(passenger,elevatorID);
		setChanged();
		notifyObservers(passenger);
	}
	
	public void generateWTReport(){
		jasperReportManager.getWTimeJReport();
	}

	public void generateSTReport(){
		jasperReportManager.getSTimeJReport();
	}
	
	public void generateTEnergyReport(){
		jasperReportManager.getTEnergyJReport();
	}
	
	public void generateTrafficJReport(){
		jasperReportManager.getTrafficJReport();
	}

	public void generateTrafficInJReport(){
		jasperReportManager.getTrafficInJReport();
	}

	public void generateTrafficOutJReport(){
		jasperReportManager.getTrafficOutJReport();
	}

	public void generateTrafficInterfloorJReport(){
		jasperReportManager.getTrafficInterfloorJReport();
	}
	
	public void generateWTHourJReport(){
		jasperReportManager.getWTHourJReport();
	}
	
	public void generateWTUserJReport(){
		jasperReportManager.getWTUserJReport();
	}
	
	public void generateWTAcumJReport(){
		jasperReportManager.getWTAcumJReport();
	}
    
}
